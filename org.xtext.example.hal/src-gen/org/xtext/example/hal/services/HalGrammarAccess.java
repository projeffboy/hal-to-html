/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.hal.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class HalGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class HALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.HAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPasswordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPasswordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPasswordSTRINGTerminalRuleCall_1_0 = (RuleCall)cPasswordAssignment_1.eContents().get(0);
		private final Keyword cAddressKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAddressAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAddressSTRINGTerminalRuleCall_3_0 = (RuleCall)cAddressAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cSensorsKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Assignment cTypesAssignment_4_2_2 = (Assignment)cGroup_4_2.eContents().get(2);
		private final RuleCall cTypesSensorParserRuleCall_4_2_2_0 = (RuleCall)cTypesAssignment_4_2_2.eContents().get(0);
		private final Group cGroup_4_2_3 = (Group)cGroup_4_2.eContents().get(3);
		private final Keyword cCommaKeyword_4_2_3_0 = (Keyword)cGroup_4_2_3.eContents().get(0);
		private final Assignment cTypesAssignment_4_2_3_1 = (Assignment)cGroup_4_2_3.eContents().get(1);
		private final RuleCall cTypesSensorParserRuleCall_4_2_3_1_0 = (RuleCall)cTypesAssignment_4_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2_4 = (Keyword)cGroup_4_2.eContents().get(4);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cActuatorsKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_3_1 = (Keyword)cGroup_4_3.eContents().get(1);
		private final Assignment cTypesAssignment_4_3_2 = (Assignment)cGroup_4_3.eContents().get(2);
		private final RuleCall cTypesActuatorParserRuleCall_4_3_2_0 = (RuleCall)cTypesAssignment_4_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3_3 = (Keyword)cGroup_4_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRoomsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cRoomsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cRoomsRoomParserRuleCall_5_2_0 = (RuleCall)cRoomsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRulesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cRulesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cRulesAutomationRuleParserRuleCall_6_2_0 = (RuleCall)cRulesAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSensorEntriesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cEntriesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cEntriesSensorEntryParserRuleCall_7_2_0 = (RuleCall)cEntriesAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//HAL:
		//    'password' password=STRING
		//    'address' address=STRING
		//    ('types' '{'
		//        ('sensors' '{'
		//            types+=Sensor ("," types+=Sensor)*
		//        '}')?
		//        ('actuators' '{'
		//            types+=Actuator*
		//        '}')?
		//    '}')?
		//    ('rooms' '{' rooms+=Room* '}')?
		//    ('rules' '{' rules+=AutomationRule* '}')?
		//    ('sensorEntries' '{' entries+=SensorEntry* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'password' password=STRING
		//'address' address=STRING
		//('types' '{'
		//    ('sensors' '{'
		//        types+=Sensor ("," types+=Sensor)*
		//    '}')?
		//    ('actuators' '{'
		//        types+=Actuator*
		//    '}')?
		//'}')?
		//('rooms' '{' rooms+=Room* '}')?
		//('rules' '{' rules+=AutomationRule* '}')?
		//('sensorEntries' '{' entries+=SensorEntry* '}')?
		public Group getGroup() { return cGroup; }
		
		//'password'
		public Keyword getPasswordKeyword_0() { return cPasswordKeyword_0; }
		
		//password=STRING
		public Assignment getPasswordAssignment_1() { return cPasswordAssignment_1; }
		
		//STRING
		public RuleCall getPasswordSTRINGTerminalRuleCall_1_0() { return cPasswordSTRINGTerminalRuleCall_1_0; }
		
		//'address'
		public Keyword getAddressKeyword_2() { return cAddressKeyword_2; }
		
		//address=STRING
		public Assignment getAddressAssignment_3() { return cAddressAssignment_3; }
		
		//STRING
		public RuleCall getAddressSTRINGTerminalRuleCall_3_0() { return cAddressSTRINGTerminalRuleCall_3_0; }
		
		//('types' '{'
		//    ('sensors' '{'
		//        types+=Sensor ("," types+=Sensor)*
		//    '}')?
		//    ('actuators' '{'
		//        types+=Actuator*
		//    '}')?
		//'}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'types'
		public Keyword getTypesKeyword_4_0() { return cTypesKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//('sensors' '{'
		//    types+=Sensor ("," types+=Sensor)*
		//'}')?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'sensors'
		public Keyword getSensorsKeyword_4_2_0() { return cSensorsKeyword_4_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_2_1() { return cLeftCurlyBracketKeyword_4_2_1; }
		
		//types+=Sensor
		public Assignment getTypesAssignment_4_2_2() { return cTypesAssignment_4_2_2; }
		
		//Sensor
		public RuleCall getTypesSensorParserRuleCall_4_2_2_0() { return cTypesSensorParserRuleCall_4_2_2_0; }
		
		//("," types+=Sensor)*
		public Group getGroup_4_2_3() { return cGroup_4_2_3; }
		
		//","
		public Keyword getCommaKeyword_4_2_3_0() { return cCommaKeyword_4_2_3_0; }
		
		//types+=Sensor
		public Assignment getTypesAssignment_4_2_3_1() { return cTypesAssignment_4_2_3_1; }
		
		//Sensor
		public RuleCall getTypesSensorParserRuleCall_4_2_3_1_0() { return cTypesSensorParserRuleCall_4_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2_4() { return cRightCurlyBracketKeyword_4_2_4; }
		
		//('actuators' '{'
		//    types+=Actuator*
		//'}')?
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//'actuators'
		public Keyword getActuatorsKeyword_4_3_0() { return cActuatorsKeyword_4_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_3_1() { return cLeftCurlyBracketKeyword_4_3_1; }
		
		//types+=Actuator*
		public Assignment getTypesAssignment_4_3_2() { return cTypesAssignment_4_3_2; }
		
		//Actuator
		public RuleCall getTypesActuatorParserRuleCall_4_3_2_0() { return cTypesActuatorParserRuleCall_4_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3_3() { return cRightCurlyBracketKeyword_4_3_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('rooms' '{' rooms+=Room* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'rooms'
		public Keyword getRoomsKeyword_5_0() { return cRoomsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//rooms+=Room*
		public Assignment getRoomsAssignment_5_2() { return cRoomsAssignment_5_2; }
		
		//Room
		public RuleCall getRoomsRoomParserRuleCall_5_2_0() { return cRoomsRoomParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//('rules' '{' rules+=AutomationRule* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'rules'
		public Keyword getRulesKeyword_6_0() { return cRulesKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//rules+=AutomationRule*
		public Assignment getRulesAssignment_6_2() { return cRulesAssignment_6_2; }
		
		//AutomationRule
		public RuleCall getRulesAutomationRuleParserRuleCall_6_2_0() { return cRulesAutomationRuleParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//('sensorEntries' '{' entries+=SensorEntry* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'sensorEntries'
		public Keyword getSensorEntriesKeyword_7_0() { return cSensorEntriesKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//entries+=SensorEntry*
		public Assignment getEntriesAssignment_7_2() { return cEntriesAssignment_7_2; }
		
		//SensorEntry
		public RuleCall getEntriesSensorEntryParserRuleCall_7_2_0() { return cEntriesSensorEntryParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class DeviceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.DeviceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DeviceType:
		//    Sensor | Actuator;
		@Override public ParserRule getRule() { return rule; }
		
		//Sensor | Actuator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0() { return cSensorParserRuleCall_0; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_1() { return cActuatorParserRuleCall_1; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicRelationalTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundRelationalTermParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BooleanExpression:
		//    AtomicRelationalTerm | CompoundRelationalTerm;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomicRelationalTerm | CompoundRelationalTerm
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AtomicRelationalTerm
		public RuleCall getAtomicRelationalTermParserRuleCall_0() { return cAtomicRelationalTermParserRuleCall_0; }
		
		//CompoundRelationalTerm
		public RuleCall getCompoundRelationalTermParserRuleCall_1() { return cCompoundRelationalTermParserRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//QualifiedName:
		//    (STRING | ID) ('.' (STRING | ID))?;
		@Override public ParserRule getRule() { return rule; }
		
		//(STRING | ID) ('.' (STRING | ID))?
		public Group getGroup() { return cGroup; }
		
		//(STRING | ID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_0() { return cSTRINGTerminalRuleCall_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }
		
		//('.' (STRING | ID))?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//(STRING | ID)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1_0() { return cSTRINGTerminalRuleCall_1_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
	}
	public class RoomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.Room");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthPosFloatParserRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		private final Keyword cXKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWidthAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWidthPosFloatParserRuleCall_4_0 = (RuleCall)cWidthAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cDevicesAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cDevicesDeviceParserRuleCall_7_0_0 = (RuleCall)cDevicesAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cDevicesAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cDevicesDeviceParserRuleCall_7_1_1_0 = (RuleCall)cDevicesAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Room:
		//    name=QualifiedName
		//    '('
		//    length=PosFloat
		//    'x'
		//    width=PosFloat
		//    ')'
		//    '{'
		//    (devices+=Device ("," devices+=Device)*)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedName
		//'('
		//length=PosFloat
		//'x'
		//width=PosFloat
		//')'
		//'{'
		//(devices+=Device ("," devices+=Device)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//length=PosFloat
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }
		
		//PosFloat
		public RuleCall getLengthPosFloatParserRuleCall_2_0() { return cLengthPosFloatParserRuleCall_2_0; }
		
		//'x'
		public Keyword getXKeyword_3() { return cXKeyword_3; }
		
		//width=PosFloat
		public Assignment getWidthAssignment_4() { return cWidthAssignment_4; }
		
		//PosFloat
		public RuleCall getWidthPosFloatParserRuleCall_4_0() { return cWidthPosFloatParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//(devices+=Device ("," devices+=Device)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//devices+=Device
		public Assignment getDevicesAssignment_7_0() { return cDevicesAssignment_7_0; }
		
		//Device
		public RuleCall getDevicesDeviceParserRuleCall_7_0_0() { return cDevicesDeviceParserRuleCall_7_0_0; }
		
		//("," devices+=Device)*
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }
		
		//devices+=Device
		public Assignment getDevicesAssignment_7_1_1() { return cDevicesAssignment_7_1_1; }
		
		//Device
		public RuleCall getDevicesDeviceParserRuleCall_7_1_1_0() { return cDevicesDeviceParserRuleCall_7_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class AutomationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.AutomationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActiveAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cActiveActiveKeyword_1_1_0 = (Keyword)cActiveAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cWHENKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPreconditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPreconditionBooleanExpressionParserRuleCall_4_0 = (RuleCall)cPreconditionAssignment_4.eContents().get(0);
		private final Keyword cTHENKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cActionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActionsActionParserRuleCall_6_0 = (RuleCall)cActionsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cActionsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_7_1_0 = (RuleCall)cActionsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//AutomationRule:
		//    name=QualifiedName
		//    ('(' active?='active' ')')?
		//    '{'
		//    'WHEN' precondition=BooleanExpression
		//    'THEN' actions+=Action ("," actions+=Action)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedName
		//('(' active?='active' ')')?
		//'{'
		//'WHEN' precondition=BooleanExpression
		//'THEN' actions+=Action ("," actions+=Action)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }
		
		//('(' active?='active' ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//active?='active'
		public Assignment getActiveAssignment_1_1() { return cActiveAssignment_1_1; }
		
		//'active'
		public Keyword getActiveActiveKeyword_1_1_0() { return cActiveActiveKeyword_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'WHEN'
		public Keyword getWHENKeyword_3() { return cWHENKeyword_3; }
		
		//precondition=BooleanExpression
		public Assignment getPreconditionAssignment_4() { return cPreconditionAssignment_4; }
		
		//BooleanExpression
		public RuleCall getPreconditionBooleanExpressionParserRuleCall_4_0() { return cPreconditionBooleanExpressionParserRuleCall_4_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_5() { return cTHENKeyword_5; }
		
		//actions+=Action
		public Assignment getActionsAssignment_6() { return cActionsAssignment_6; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_6_0() { return cActionsActionParserRuleCall_6_0; }
		
		//("," actions+=Action)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_7_1() { return cActionsAssignment_7_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_7_1_0() { return cActionsActionParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class SensorEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.SensorEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSensorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSensorDeviceCrossReference_0_0 = (CrossReference)cSensorAssignment_0.eContents().get(0);
		private final RuleCall cSensorDeviceQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSensorDeviceCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cReadingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReadingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReadingQualifiedNameParserRuleCall_3_0 = (RuleCall)cReadingAssignment_3.eContents().get(0);
		private final Keyword cTimestampKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTimeStampAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTimeStampELongParserRuleCall_5_0 = (RuleCall)cTimeStampAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SensorEntry:
		//    sensor=[Device|QualifiedName]
		//    '{'
		//    'reading' reading=QualifiedName
		//    'timestamp' timeStamp=ELong
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//sensor=[Device|QualifiedName]
		//'{'
		//'reading' reading=QualifiedName
		//'timestamp' timeStamp=ELong
		//'}'
		public Group getGroup() { return cGroup; }
		
		//sensor=[Device|QualifiedName]
		public Assignment getSensorAssignment_0() { return cSensorAssignment_0; }
		
		//[Device|QualifiedName]
		public CrossReference getSensorDeviceCrossReference_0_0() { return cSensorDeviceCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getSensorDeviceQualifiedNameParserRuleCall_0_0_1() { return cSensorDeviceQualifiedNameParserRuleCall_0_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'reading'
		public Keyword getReadingKeyword_2() { return cReadingKeyword_2; }
		
		//reading=QualifiedName
		public Assignment getReadingAssignment_3() { return cReadingAssignment_3; }
		
		//QualifiedName
		public RuleCall getReadingQualifiedNameParserRuleCall_3_0() { return cReadingQualifiedNameParserRuleCall_3_0; }
		
		//'timestamp'
		public Keyword getTimestampKeyword_4() { return cTimestampKeyword_4; }
		
		//timeStamp=ELong
		public Assignment getTimeStampAssignment_5() { return cTimeStampAssignment_5; }
		
		//ELong
		public RuleCall getTimeStampELongParserRuleCall_5_0() { return cTimeStampELongParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.Device");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeDeviceTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeDeviceTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeDeviceTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cAtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLengthPosAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLengthPosPosFloatParserRuleCall_6_0 = (RuleCall)cLengthPosAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cWidthPosAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cWidthPosPosFloatParserRuleCall_8_0 = (RuleCall)cWidthPosAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Device:
		//    name=QualifiedName
		//    'is' 'type'
		//    type=[DeviceType|QualifiedName]
		//    'at'
		//    '('
		//    lengthPos=PosFloat
		//    ','
		//    widthPos=PosFloat
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedName
		//'is' 'type'
		//type=[DeviceType|QualifiedName]
		//'at'
		//'('
		//lengthPos=PosFloat
		//','
		//widthPos=PosFloat
		//')'
		public Group getGroup() { return cGroup; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=[DeviceType|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[DeviceType|QualifiedName]
		public CrossReference getTypeDeviceTypeCrossReference_3_0() { return cTypeDeviceTypeCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getTypeDeviceTypeQualifiedNameParserRuleCall_3_0_1() { return cTypeDeviceTypeQualifiedNameParserRuleCall_3_0_1; }
		
		//'at'
		public Keyword getAtKeyword_4() { return cAtKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//lengthPos=PosFloat
		public Assignment getLengthPosAssignment_6() { return cLengthPosAssignment_6; }
		
		//PosFloat
		public RuleCall getLengthPosPosFloatParserRuleCall_6_0() { return cLengthPosPosFloatParserRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//widthPos=PosFloat
		public Assignment getWidthPosAssignment_8() { return cWidthPosAssignment_8; }
		
		//PosFloat
		public RuleCall getWidthPosPosFloatParserRuleCall_8_0() { return cWidthPosPosFloatParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class PosFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.PosFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_2_0 = (Alternatives)cGroup_1_2.eContents().get(0);
		private final Keyword cEKeyword_1_2_0_0 = (Keyword)cAlternatives_1_2_0.eContents().get(0);
		private final Keyword cEKeyword_1_2_0_1 = (Keyword)cAlternatives_1_2_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		
		//PosFloat returns ecore::EFloat:
		//    INT ('.' INT (('E' | 'e') '-'? INT)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT (('E' | 'e') '-'? INT)?)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT (('E' | 'e') '-'? INT)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_1_2_0() { return cAlternatives_1_2_0; }
		
		//'E'
		public Keyword getEKeyword_1_2_0_0() { return cEKeyword_1_2_0_0; }
		
		//'e'
		public Keyword getEKeyword_1_2_0_1() { return cEKeyword_1_2_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_1_2_1() { return cHyphenMinusKeyword_1_2_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2_2() { return cINTTerminalRuleCall_1_2_2; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActuatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActuatorDeviceCrossReference_0_0 = (CrossReference)cActuatorAssignment_0.eContents().get(0);
		private final RuleCall cActuatorDeviceQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cActuatorDeviceCrossReference_0_0.eContents().get(1);
		private final Keyword cRunsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCommandCommandCrossReference_2_0 = (CrossReference)cCommandAssignment_2.eContents().get(0);
		private final RuleCall cCommandCommandQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cCommandCommandCrossReference_2_0.eContents().get(1);
		
		//Action:
		//    actuator=[Device|QualifiedName] 'runs' command=[Command|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//actuator=[Device|QualifiedName] 'runs' command=[Command|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//actuator=[Device|QualifiedName]
		public Assignment getActuatorAssignment_0() { return cActuatorAssignment_0; }
		
		//[Device|QualifiedName]
		public CrossReference getActuatorDeviceCrossReference_0_0() { return cActuatorDeviceCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getActuatorDeviceQualifiedNameParserRuleCall_0_0_1() { return cActuatorDeviceQualifiedNameParserRuleCall_0_0_1; }
		
		//'runs'
		public Keyword getRunsKeyword_1() { return cRunsKeyword_1; }
		
		//command=[Command|QualifiedName]
		public Assignment getCommandAssignment_2() { return cCommandAssignment_2; }
		
		//[Command|QualifiedName]
		public CrossReference getCommandCommandCrossReference_2_0() { return cCommandCommandCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getCommandCommandQualifiedNameParserRuleCall_2_0_1() { return cCommandCommandQualifiedNameParserRuleCall_2_0_1; }
	}
	public class AtomicRelationalTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.AtomicRelationalTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegatedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegatedNOTKeyword_0_0 = (Keyword)cNegatedAssignment_0.eContents().get(0);
		private final Assignment cSensorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSensorDeviceCrossReference_1_0 = (CrossReference)cSensorAssignment_1.eContents().get(0);
		private final RuleCall cSensorDeviceQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cSensorDeviceCrossReference_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorComparisonOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cComparedAgainstValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComparedAgainstValueQualifiedNameParserRuleCall_3_0 = (RuleCall)cComparedAgainstValueAssignment_3.eContents().get(0);
		
		//AtomicRelationalTerm:
		//    (negated?='NOT')?
		//    sensor=[Device|QualifiedName]
		//    operator=ComparisonOperator
		//    comparedAgainstValue=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//(negated?='NOT')?
		//sensor=[Device|QualifiedName]
		//operator=ComparisonOperator
		//comparedAgainstValue=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//(negated?='NOT')?
		public Assignment getNegatedAssignment_0() { return cNegatedAssignment_0; }
		
		//'NOT'
		public Keyword getNegatedNOTKeyword_0_0() { return cNegatedNOTKeyword_0_0; }
		
		//sensor=[Device|QualifiedName]
		public Assignment getSensorAssignment_1() { return cSensorAssignment_1; }
		
		//[Device|QualifiedName]
		public CrossReference getSensorDeviceCrossReference_1_0() { return cSensorDeviceCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getSensorDeviceQualifiedNameParserRuleCall_1_0_1() { return cSensorDeviceQualifiedNameParserRuleCall_1_0_1; }
		
		//operator=ComparisonOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//ComparisonOperator
		public RuleCall getOperatorComparisonOperatorEnumRuleCall_2_0() { return cOperatorComparisonOperatorEnumRuleCall_2_0; }
		
		//comparedAgainstValue=QualifiedName
		public Assignment getComparedAgainstValueAssignment_3() { return cComparedAgainstValueAssignment_3; }
		
		//QualifiedName
		public RuleCall getComparedAgainstValueQualifiedNameParserRuleCall_3_0() { return cComparedAgainstValueQualifiedNameParserRuleCall_3_0; }
	}
	public class CompoundRelationalTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.CompoundRelationalTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegatedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegatedNOTKeyword_0_0 = (Keyword)cNegatedAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLHSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLHSBooleanExpressionParserRuleCall_2_0 = (RuleCall)cLHSAssignment_2.eContents().get(0);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorBooleanOperatorEnumRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Assignment cRHSAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRHSBooleanExpressionParserRuleCall_4_0 = (RuleCall)cRHSAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CompoundRelationalTerm:
		//    (negated?='NOT')?
		//    '('
		//    LHS=BooleanExpression
		//    operator=BooleanOperator
		//    RHS=BooleanExpression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//(negated?='NOT')?
		//'('
		//LHS=BooleanExpression
		//operator=BooleanOperator
		//RHS=BooleanExpression
		//')'
		public Group getGroup() { return cGroup; }
		
		//(negated?='NOT')?
		public Assignment getNegatedAssignment_0() { return cNegatedAssignment_0; }
		
		//'NOT'
		public Keyword getNegatedNOTKeyword_0_0() { return cNegatedNOTKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//LHS=BooleanExpression
		public Assignment getLHSAssignment_2() { return cLHSAssignment_2; }
		
		//BooleanExpression
		public RuleCall getLHSBooleanExpressionParserRuleCall_2_0() { return cLHSBooleanExpressionParserRuleCall_2_0; }
		
		//operator=BooleanOperator
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//BooleanOperator
		public RuleCall getOperatorBooleanOperatorEnumRuleCall_3_0() { return cOperatorBooleanOperatorEnumRuleCall_3_0; }
		
		//RHS=BooleanExpression
		public Assignment getRHSAssignment_4() { return cRHSAssignment_4; }
		
		//BooleanExpression
		public RuleCall getRHSBooleanExpressionParserRuleCall_4_0() { return cRHSBooleanExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Command:
		//    {Command}
		//    name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//{Command}
		//name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//{Command}
		public Action getCommandAction_0() { return cCommandAction_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Sensor:
		//    {Sensor}
		//    name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sensor}
		//name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//{Sensor}
		public Action getSensorAction_0() { return cSensorAction_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActuatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cCommandsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cCommandsCommandParserRuleCall_3_0_0 = (RuleCall)cCommandsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cCommandsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_3_1_1_0 = (RuleCall)cCommandsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Actuator:
		//    {Actuator}
		//    name=QualifiedName
		//    '{'
		//    (commands+=Command ("," commands+=Command)*)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Actuator}
		//name=QualifiedName
		//'{'
		//(commands+=Command ("," commands+=Command)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Actuator}
		public Action getActuatorAction_0() { return cActuatorAction_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(commands+=Command ("," commands+=Command)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_3_0() { return cCommandsAssignment_3_0; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_3_0_0() { return cCommandsCommandParserRuleCall_3_0_0; }
		
		//("," commands+=Command)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_3_1_1() { return cCommandsAssignment_3_1_1; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_3_1_1_0() { return cCommandsCommandParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ELongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.ELong");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ELong returns ecore::ELong:
		//    INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	public class ComparisonOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATERTHANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERTHANGreaterThanSignKeyword_1_0 = (Keyword)cGREATERTHANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATERTHANOREQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATERTHANOREQUALGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGREATERTHANOREQUALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLESSTHANEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLESSTHANLessThanSignKeyword_3_0 = (Keyword)cLESSTHANEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLESSTHANOREQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLESSTHANOREQUALLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLESSTHANOREQUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEQUALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNOTEQUALExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNOTEQUALEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ComparisonOperator:
		//    EQUAL='=' | GREATERTHAN='>' | GREATERTHANOREQUAL='>=' | LESSTHAN='<' |
		//    LESSTHANOREQUAL='<=' | NOTEQUAL='!=';
		public EnumRule getRule() { return rule; }
		
		//EQUAL='=' | GREATERTHAN='>' | GREATERTHANOREQUAL='>=' | LESSTHAN='<' |
		//LESSTHANOREQUAL='<=' | NOTEQUAL='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL='='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQUALEqualsSignKeyword_0_0() { return cEQUALEqualsSignKeyword_0_0; }
		
		//GREATERTHAN='>'
		public EnumLiteralDeclaration getGREATERTHANEnumLiteralDeclaration_1() { return cGREATERTHANEnumLiteralDeclaration_1; }
		
		//'>'
		public Keyword getGREATERTHANGreaterThanSignKeyword_1_0() { return cGREATERTHANGreaterThanSignKeyword_1_0; }
		
		//GREATERTHANOREQUAL='>='
		public EnumLiteralDeclaration getGREATERTHANOREQUALEnumLiteralDeclaration_2() { return cGREATERTHANOREQUALEnumLiteralDeclaration_2; }
		
		//'>='
		public Keyword getGREATERTHANOREQUALGreaterThanSignEqualsSignKeyword_2_0() { return cGREATERTHANOREQUALGreaterThanSignEqualsSignKeyword_2_0; }
		
		//LESSTHAN='<'
		public EnumLiteralDeclaration getLESSTHANEnumLiteralDeclaration_3() { return cLESSTHANEnumLiteralDeclaration_3; }
		
		//'<'
		public Keyword getLESSTHANLessThanSignKeyword_3_0() { return cLESSTHANLessThanSignKeyword_3_0; }
		
		//LESSTHANOREQUAL='<='
		public EnumLiteralDeclaration getLESSTHANOREQUALEnumLiteralDeclaration_4() { return cLESSTHANOREQUALEnumLiteralDeclaration_4; }
		
		//'<='
		public Keyword getLESSTHANOREQUALLessThanSignEqualsSignKeyword_4_0() { return cLESSTHANOREQUALLessThanSignEqualsSignKeyword_4_0; }
		
		//NOTEQUAL='!='
		public EnumLiteralDeclaration getNOTEQUALEnumLiteralDeclaration_5() { return cNOTEQUALEnumLiteralDeclaration_5; }
		
		//'!='
		public Keyword getNOTEQUALExclamationMarkEqualsSignKeyword_5_0() { return cNOTEQUALExclamationMarkEqualsSignKeyword_5_0; }
	}
	public class BooleanOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hal.Hal.BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORORKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanOperator:
		//    AND='AND' | OR='OR';
		public EnumRule getRule() { return rule; }
		
		//AND='AND' | OR='OR'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND='AND'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'AND'
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }
		
		//OR='OR'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'OR'
		public Keyword getORORKeyword_1_0() { return cORORKeyword_1_0; }
	}
	
	private final HALElements pHAL;
	private final DeviceTypeElements pDeviceType;
	private final BooleanExpressionElements pBooleanExpression;
	private final QualifiedNameElements pQualifiedName;
	private final RoomElements pRoom;
	private final AutomationRuleElements pAutomationRule;
	private final SensorEntryElements pSensorEntry;
	private final DeviceElements pDevice;
	private final PosFloatElements pPosFloat;
	private final ActionElements pAction;
	private final AtomicRelationalTermElements pAtomicRelationalTerm;
	private final CompoundRelationalTermElements pCompoundRelationalTerm;
	private final ComparisonOperatorElements eComparisonOperator;
	private final BooleanOperatorElements eBooleanOperator;
	private final CommandElements pCommand;
	private final SensorElements pSensor;
	private final ActuatorElements pActuator;
	private final ELongElements pELong;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HalGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pHAL = new HALElements();
		this.pDeviceType = new DeviceTypeElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pRoom = new RoomElements();
		this.pAutomationRule = new AutomationRuleElements();
		this.pSensorEntry = new SensorEntryElements();
		this.pDevice = new DeviceElements();
		this.pPosFloat = new PosFloatElements();
		this.pAction = new ActionElements();
		this.pAtomicRelationalTerm = new AtomicRelationalTermElements();
		this.pCompoundRelationalTerm = new CompoundRelationalTermElements();
		this.eComparisonOperator = new ComparisonOperatorElements();
		this.eBooleanOperator = new BooleanOperatorElements();
		this.pCommand = new CommandElements();
		this.pSensor = new SensorElements();
		this.pActuator = new ActuatorElements();
		this.pELong = new ELongElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.hal.Hal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//HAL:
	//    'password' password=STRING
	//    'address' address=STRING
	//    ('types' '{'
	//        ('sensors' '{'
	//            types+=Sensor ("," types+=Sensor)*
	//        '}')?
	//        ('actuators' '{'
	//            types+=Actuator*
	//        '}')?
	//    '}')?
	//    ('rooms' '{' rooms+=Room* '}')?
	//    ('rules' '{' rules+=AutomationRule* '}')?
	//    ('sensorEntries' '{' entries+=SensorEntry* '}')?;
	public HALElements getHALAccess() {
		return pHAL;
	}
	
	public ParserRule getHALRule() {
		return getHALAccess().getRule();
	}
	
	//DeviceType:
	//    Sensor | Actuator;
	public DeviceTypeElements getDeviceTypeAccess() {
		return pDeviceType;
	}
	
	public ParserRule getDeviceTypeRule() {
		return getDeviceTypeAccess().getRule();
	}
	
	//BooleanExpression:
	//    AtomicRelationalTerm | CompoundRelationalTerm;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//QualifiedName:
	//    (STRING | ID) ('.' (STRING | ID))?;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Room:
	//    name=QualifiedName
	//    '('
	//    length=PosFloat
	//    'x'
	//    width=PosFloat
	//    ')'
	//    '{'
	//    (devices+=Device ("," devices+=Device)*)?
	//    '}';
	public RoomElements getRoomAccess() {
		return pRoom;
	}
	
	public ParserRule getRoomRule() {
		return getRoomAccess().getRule();
	}
	
	//AutomationRule:
	//    name=QualifiedName
	//    ('(' active?='active' ')')?
	//    '{'
	//    'WHEN' precondition=BooleanExpression
	//    'THEN' actions+=Action ("," actions+=Action)*
	//    '}';
	public AutomationRuleElements getAutomationRuleAccess() {
		return pAutomationRule;
	}
	
	public ParserRule getAutomationRuleRule() {
		return getAutomationRuleAccess().getRule();
	}
	
	//SensorEntry:
	//    sensor=[Device|QualifiedName]
	//    '{'
	//    'reading' reading=QualifiedName
	//    'timestamp' timeStamp=ELong
	//    '}';
	public SensorEntryElements getSensorEntryAccess() {
		return pSensorEntry;
	}
	
	public ParserRule getSensorEntryRule() {
		return getSensorEntryAccess().getRule();
	}
	
	//Device:
	//    name=QualifiedName
	//    'is' 'type'
	//    type=[DeviceType|QualifiedName]
	//    'at'
	//    '('
	//    lengthPos=PosFloat
	//    ','
	//    widthPos=PosFloat
	//    ')';
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}
	
	//PosFloat returns ecore::EFloat:
	//    INT ('.' INT (('E' | 'e') '-'? INT)?)?;
	public PosFloatElements getPosFloatAccess() {
		return pPosFloat;
	}
	
	public ParserRule getPosFloatRule() {
		return getPosFloatAccess().getRule();
	}
	
	//Action:
	//    actuator=[Device|QualifiedName] 'runs' command=[Command|QualifiedName];
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//AtomicRelationalTerm:
	//    (negated?='NOT')?
	//    sensor=[Device|QualifiedName]
	//    operator=ComparisonOperator
	//    comparedAgainstValue=QualifiedName;
	public AtomicRelationalTermElements getAtomicRelationalTermAccess() {
		return pAtomicRelationalTerm;
	}
	
	public ParserRule getAtomicRelationalTermRule() {
		return getAtomicRelationalTermAccess().getRule();
	}
	
	//CompoundRelationalTerm:
	//    (negated?='NOT')?
	//    '('
	//    LHS=BooleanExpression
	//    operator=BooleanOperator
	//    RHS=BooleanExpression
	//    ')';
	public CompoundRelationalTermElements getCompoundRelationalTermAccess() {
		return pCompoundRelationalTerm;
	}
	
	public ParserRule getCompoundRelationalTermRule() {
		return getCompoundRelationalTermAccess().getRule();
	}
	
	//enum ComparisonOperator:
	//    EQUAL='=' | GREATERTHAN='>' | GREATERTHANOREQUAL='>=' | LESSTHAN='<' |
	//    LESSTHANOREQUAL='<=' | NOTEQUAL='!=';
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return eComparisonOperator;
	}
	
	public EnumRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//enum BooleanOperator:
	//    AND='AND' | OR='OR';
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return eBooleanOperator;
	}
	
	public EnumRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}
	
	//Command:
	//    {Command}
	//    name=QualifiedName;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Sensor:
	//    {Sensor}
	//    name=QualifiedName;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Actuator:
	//    {Actuator}
	//    name=QualifiedName
	//    '{'
	//    (commands+=Command ("," commands+=Command)*)?
	//    '}';
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//ELong returns ecore::ELong:
	//    INT;
	public ELongElements getELongAccess() {
		return pELong;
	}
	
	public ParserRule getELongRule() {
		return getELongAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
