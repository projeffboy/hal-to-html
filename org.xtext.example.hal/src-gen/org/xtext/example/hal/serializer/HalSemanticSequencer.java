/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.hal.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.hal.hal.Actuator;
import org.xtext.example.hal.hal.AtomicRelationalTerm;
import org.xtext.example.hal.hal.AutomationRule;
import org.xtext.example.hal.hal.Command;
import org.xtext.example.hal.hal.CompoundRelationalTerm;
import org.xtext.example.hal.hal.Device;
import org.xtext.example.hal.hal.HAL;
import org.xtext.example.hal.hal.HalPackage;
import org.xtext.example.hal.hal.Room;
import org.xtext.example.hal.hal.Sensor;
import org.xtext.example.hal.hal.SensorEntry;
import org.xtext.example.hal.services.HalGrammarAccess;

@SuppressWarnings("all")
public class HalSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HalGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HalPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HalPackage.ACTION:
				sequence_Action(context, (org.xtext.example.hal.hal.Action) semanticObject); 
				return; 
			case HalPackage.ACTUATOR:
				sequence_Actuator(context, (Actuator) semanticObject); 
				return; 
			case HalPackage.ATOMIC_RELATIONAL_TERM:
				sequence_AtomicRelationalTerm(context, (AtomicRelationalTerm) semanticObject); 
				return; 
			case HalPackage.AUTOMATION_RULE:
				sequence_AutomationRule(context, (AutomationRule) semanticObject); 
				return; 
			case HalPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case HalPackage.COMPOUND_RELATIONAL_TERM:
				sequence_CompoundRelationalTerm(context, (CompoundRelationalTerm) semanticObject); 
				return; 
			case HalPackage.DEVICE:
				sequence_Device(context, (Device) semanticObject); 
				return; 
			case HalPackage.HAL:
				sequence_HAL(context, (HAL) semanticObject); 
				return; 
			case HalPackage.ROOM:
				sequence_Room(context, (Room) semanticObject); 
				return; 
			case HalPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case HalPackage.SENSOR_ENTRY:
				sequence_SensorEntry(context, (SensorEntry) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (actuator=[Device|QualifiedName] command=[Command|QualifiedName])
	 * </pre>
	 */
	protected void sequence_Action(ISerializationContext context, org.xtext.example.hal.hal.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HalPackage.Literals.ACTION__ACTUATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HalPackage.Literals.ACTION__ACTUATOR));
			if (transientValues.isValueTransient(semanticObject, HalPackage.Literals.ACTION__COMMAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HalPackage.Literals.ACTION__COMMAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getActuatorDeviceQualifiedNameParserRuleCall_0_0_1(), semanticObject.eGet(HalPackage.Literals.ACTION__ACTUATOR, false));
		feeder.accept(grammarAccess.getActionAccess().getCommandCommandQualifiedNameParserRuleCall_2_0_1(), semanticObject.eGet(HalPackage.Literals.ACTION__COMMAND, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeviceType returns Actuator
	 *     Actuator returns Actuator
	 *
	 * Constraint:
	 *     (name=QualifiedName (commands+=Command commands+=Command*)?)
	 * </pre>
	 */
	protected void sequence_Actuator(ISerializationContext context, Actuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BooleanExpression returns AtomicRelationalTerm
	 *     AtomicRelationalTerm returns AtomicRelationalTerm
	 *
	 * Constraint:
	 *     (negated?='NOT'? sensor=[Device|QualifiedName] operator=ComparisonOperator comparedAgainstValue=QualifiedName)
	 * </pre>
	 */
	protected void sequence_AtomicRelationalTerm(ISerializationContext context, AtomicRelationalTerm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AutomationRule returns AutomationRule
	 *
	 * Constraint:
	 *     (name=QualifiedName active?='active'? precondition=BooleanExpression actions+=Action actions+=Action*)
	 * </pre>
	 */
	protected void sequence_AutomationRule(ISerializationContext context, AutomationRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     name=QualifiedName
	 * </pre>
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HalPackage.Literals.COMMAND__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HalPackage.Literals.COMMAND__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandAccess().getNameQualifiedNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BooleanExpression returns CompoundRelationalTerm
	 *     CompoundRelationalTerm returns CompoundRelationalTerm
	 *
	 * Constraint:
	 *     (negated?='NOT'? LHS=BooleanExpression operator=BooleanOperator RHS=BooleanExpression)
	 * </pre>
	 */
	protected void sequence_CompoundRelationalTerm(ISerializationContext context, CompoundRelationalTerm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Device returns Device
	 *
	 * Constraint:
	 *     (name=QualifiedName type=[DeviceType|QualifiedName] lengthPos=PosFloat widthPos=PosFloat)
	 * </pre>
	 */
	protected void sequence_Device(ISerializationContext context, Device semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HalPackage.Literals.DEVICE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HalPackage.Literals.DEVICE__NAME));
			if (transientValues.isValueTransient(semanticObject, HalPackage.Literals.DEVICE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HalPackage.Literals.DEVICE__TYPE));
			if (transientValues.isValueTransient(semanticObject, HalPackage.Literals.DEVICE__LENGTH_POS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HalPackage.Literals.DEVICE__LENGTH_POS));
			if (transientValues.isValueTransient(semanticObject, HalPackage.Literals.DEVICE__WIDTH_POS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HalPackage.Literals.DEVICE__WIDTH_POS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeviceAccess().getNameQualifiedNameParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDeviceAccess().getTypeDeviceTypeQualifiedNameParserRuleCall_3_0_1(), semanticObject.eGet(HalPackage.Literals.DEVICE__TYPE, false));
		feeder.accept(grammarAccess.getDeviceAccess().getLengthPosPosFloatParserRuleCall_6_0(), semanticObject.getLengthPos());
		feeder.accept(grammarAccess.getDeviceAccess().getWidthPosPosFloatParserRuleCall_8_0(), semanticObject.getWidthPos());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HAL returns HAL
	 *
	 * Constraint:
	 *     (
	 *         password=STRING 
	 *         address=STRING 
	 *         (types+=Sensor types+=Sensor*)? 
	 *         types+=Actuator* 
	 *         rooms+=Room* 
	 *         rules+=AutomationRule* 
	 *         entries+=SensorEntry*
	 *     )
	 * </pre>
	 */
	protected void sequence_HAL(ISerializationContext context, HAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Room returns Room
	 *
	 * Constraint:
	 *     (name=QualifiedName length=PosFloat width=PosFloat (devices+=Device devices+=Device*)?)
	 * </pre>
	 */
	protected void sequence_Room(ISerializationContext context, Room semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SensorEntry returns SensorEntry
	 *
	 * Constraint:
	 *     (sensor=[Device|QualifiedName] reading=QualifiedName timeStamp=ELong)
	 * </pre>
	 */
	protected void sequence_SensorEntry(ISerializationContext context, SensorEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HalPackage.Literals.SENSOR_ENTRY__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HalPackage.Literals.SENSOR_ENTRY__SENSOR));
			if (transientValues.isValueTransient(semanticObject, HalPackage.Literals.SENSOR_ENTRY__READING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HalPackage.Literals.SENSOR_ENTRY__READING));
			if (transientValues.isValueTransient(semanticObject, HalPackage.Literals.SENSOR_ENTRY__TIME_STAMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HalPackage.Literals.SENSOR_ENTRY__TIME_STAMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSensorEntryAccess().getSensorDeviceQualifiedNameParserRuleCall_0_0_1(), semanticObject.eGet(HalPackage.Literals.SENSOR_ENTRY__SENSOR, false));
		feeder.accept(grammarAccess.getSensorEntryAccess().getReadingQualifiedNameParserRuleCall_3_0(), semanticObject.getReading());
		feeder.accept(grammarAccess.getSensorEntryAccess().getTimeStampELongParserRuleCall_5_0(), semanticObject.getTimeStamp());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeviceType returns Sensor
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     name=QualifiedName
	 * </pre>
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HalPackage.Literals.DEVICE_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HalPackage.Literals.DEVICE_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSensorAccess().getNameQualifiedNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
