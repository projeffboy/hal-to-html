/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.hal.hal.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.hal.hal.Device;
import org.xtext.example.hal.hal.HalPackage;
import org.xtext.example.hal.hal.SensorEntry;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sensor Entry</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.hal.hal.impl.SensorEntryImpl#getSensor <em>Sensor</em>}</li>
 *   <li>{@link org.xtext.example.hal.hal.impl.SensorEntryImpl#getReading <em>Reading</em>}</li>
 *   <li>{@link org.xtext.example.hal.hal.impl.SensorEntryImpl#getTimeStamp <em>Time Stamp</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SensorEntryImpl extends MinimalEObjectImpl.Container implements SensorEntry
{
  /**
   * The cached value of the '{@link #getSensor() <em>Sensor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSensor()
   * @generated
   * @ordered
   */
  protected Device sensor;

  /**
   * The default value of the '{@link #getReading() <em>Reading</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReading()
   * @generated
   * @ordered
   */
  protected static final String READING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getReading() <em>Reading</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReading()
   * @generated
   * @ordered
   */
  protected String reading = READING_EDEFAULT;

  /**
   * The default value of the '{@link #getTimeStamp() <em>Time Stamp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeStamp()
   * @generated
   * @ordered
   */
  protected static final long TIME_STAMP_EDEFAULT = 0L;

  /**
   * The cached value of the '{@link #getTimeStamp() <em>Time Stamp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeStamp()
   * @generated
   * @ordered
   */
  protected long timeStamp = TIME_STAMP_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SensorEntryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HalPackage.Literals.SENSOR_ENTRY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Device getSensor()
  {
    if (sensor != null && sensor.eIsProxy())
    {
      InternalEObject oldSensor = (InternalEObject)sensor;
      sensor = (Device)eResolveProxy(oldSensor);
      if (sensor != oldSensor)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, HalPackage.SENSOR_ENTRY__SENSOR, oldSensor, sensor));
      }
    }
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Device basicGetSensor()
  {
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSensor(Device newSensor)
  {
    Device oldSensor = sensor;
    sensor = newSensor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HalPackage.SENSOR_ENTRY__SENSOR, oldSensor, sensor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getReading()
  {
    return reading;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReading(String newReading)
  {
    String oldReading = reading;
    reading = newReading;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HalPackage.SENSOR_ENTRY__READING, oldReading, reading));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public long getTimeStamp()
  {
    return timeStamp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeStamp(long newTimeStamp)
  {
    long oldTimeStamp = timeStamp;
    timeStamp = newTimeStamp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HalPackage.SENSOR_ENTRY__TIME_STAMP, oldTimeStamp, timeStamp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HalPackage.SENSOR_ENTRY__SENSOR:
        if (resolve) return getSensor();
        return basicGetSensor();
      case HalPackage.SENSOR_ENTRY__READING:
        return getReading();
      case HalPackage.SENSOR_ENTRY__TIME_STAMP:
        return getTimeStamp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HalPackage.SENSOR_ENTRY__SENSOR:
        setSensor((Device)newValue);
        return;
      case HalPackage.SENSOR_ENTRY__READING:
        setReading((String)newValue);
        return;
      case HalPackage.SENSOR_ENTRY__TIME_STAMP:
        setTimeStamp((Long)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HalPackage.SENSOR_ENTRY__SENSOR:
        setSensor((Device)null);
        return;
      case HalPackage.SENSOR_ENTRY__READING:
        setReading(READING_EDEFAULT);
        return;
      case HalPackage.SENSOR_ENTRY__TIME_STAMP:
        setTimeStamp(TIME_STAMP_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HalPackage.SENSOR_ENTRY__SENSOR:
        return sensor != null;
      case HalPackage.SENSOR_ENTRY__READING:
        return READING_EDEFAULT == null ? reading != null : !READING_EDEFAULT.equals(reading);
      case HalPackage.SENSOR_ENTRY__TIME_STAMP:
        return timeStamp != TIME_STAMP_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (reading: ");
    result.append(reading);
    result.append(", timeStamp: ");
    result.append(timeStamp);
    result.append(')');
    return result.toString();
  }

} //SensorEntryImpl
