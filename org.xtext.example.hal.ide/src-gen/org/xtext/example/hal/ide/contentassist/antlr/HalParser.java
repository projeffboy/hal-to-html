/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.hal.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.hal.ide.contentassist.antlr.internal.InternalHalParser;
import org.xtext.example.hal.services.HalGrammarAccess;

public class HalParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(HalGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, HalGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeviceTypeAccess().getAlternatives(), "rule__DeviceType__Alternatives");
			builder.put(grammarAccess.getBooleanExpressionAccess().getAlternatives(), "rule__BooleanExpression__Alternatives");
			builder.put(grammarAccess.getQualifiedNameAccess().getAlternatives_0(), "rule__QualifiedName__Alternatives_0");
			builder.put(grammarAccess.getQualifiedNameAccess().getAlternatives_1_1(), "rule__QualifiedName__Alternatives_1_1");
			builder.put(grammarAccess.getPosFloatAccess().getAlternatives_1_2_0(), "rule__PosFloat__Alternatives_1_2_0");
			builder.put(grammarAccess.getComparisonOperatorAccess().getAlternatives(), "rule__ComparisonOperator__Alternatives");
			builder.put(grammarAccess.getBooleanOperatorAccess().getAlternatives(), "rule__BooleanOperator__Alternatives");
			builder.put(grammarAccess.getHALAccess().getGroup(), "rule__HAL__Group__0");
			builder.put(grammarAccess.getHALAccess().getGroup_4(), "rule__HAL__Group_4__0");
			builder.put(grammarAccess.getHALAccess().getGroup_4_2(), "rule__HAL__Group_4_2__0");
			builder.put(grammarAccess.getHALAccess().getGroup_4_2_3(), "rule__HAL__Group_4_2_3__0");
			builder.put(grammarAccess.getHALAccess().getGroup_4_3(), "rule__HAL__Group_4_3__0");
			builder.put(grammarAccess.getHALAccess().getGroup_5(), "rule__HAL__Group_5__0");
			builder.put(grammarAccess.getHALAccess().getGroup_6(), "rule__HAL__Group_6__0");
			builder.put(grammarAccess.getHALAccess().getGroup_7(), "rule__HAL__Group_7__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getRoomAccess().getGroup(), "rule__Room__Group__0");
			builder.put(grammarAccess.getRoomAccess().getGroup_7(), "rule__Room__Group_7__0");
			builder.put(grammarAccess.getRoomAccess().getGroup_7_1(), "rule__Room__Group_7_1__0");
			builder.put(grammarAccess.getAutomationRuleAccess().getGroup(), "rule__AutomationRule__Group__0");
			builder.put(grammarAccess.getAutomationRuleAccess().getGroup_1(), "rule__AutomationRule__Group_1__0");
			builder.put(grammarAccess.getAutomationRuleAccess().getGroup_7(), "rule__AutomationRule__Group_7__0");
			builder.put(grammarAccess.getSensorEntryAccess().getGroup(), "rule__SensorEntry__Group__0");
			builder.put(grammarAccess.getDeviceAccess().getGroup(), "rule__Device__Group__0");
			builder.put(grammarAccess.getPosFloatAccess().getGroup(), "rule__PosFloat__Group__0");
			builder.put(grammarAccess.getPosFloatAccess().getGroup_1(), "rule__PosFloat__Group_1__0");
			builder.put(grammarAccess.getPosFloatAccess().getGroup_1_2(), "rule__PosFloat__Group_1_2__0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getAtomicRelationalTermAccess().getGroup(), "rule__AtomicRelationalTerm__Group__0");
			builder.put(grammarAccess.getCompoundRelationalTermAccess().getGroup(), "rule__CompoundRelationalTerm__Group__0");
			builder.put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
			builder.put(grammarAccess.getActuatorAccess().getGroup(), "rule__Actuator__Group__0");
			builder.put(grammarAccess.getActuatorAccess().getGroup_3(), "rule__Actuator__Group_3__0");
			builder.put(grammarAccess.getActuatorAccess().getGroup_3_1(), "rule__Actuator__Group_3_1__0");
			builder.put(grammarAccess.getHALAccess().getPasswordAssignment_1(), "rule__HAL__PasswordAssignment_1");
			builder.put(grammarAccess.getHALAccess().getAddressAssignment_3(), "rule__HAL__AddressAssignment_3");
			builder.put(grammarAccess.getHALAccess().getTypesAssignment_4_2_2(), "rule__HAL__TypesAssignment_4_2_2");
			builder.put(grammarAccess.getHALAccess().getTypesAssignment_4_2_3_1(), "rule__HAL__TypesAssignment_4_2_3_1");
			builder.put(grammarAccess.getHALAccess().getTypesAssignment_4_3_2(), "rule__HAL__TypesAssignment_4_3_2");
			builder.put(grammarAccess.getHALAccess().getRoomsAssignment_5_2(), "rule__HAL__RoomsAssignment_5_2");
			builder.put(grammarAccess.getHALAccess().getRulesAssignment_6_2(), "rule__HAL__RulesAssignment_6_2");
			builder.put(grammarAccess.getHALAccess().getEntriesAssignment_7_2(), "rule__HAL__EntriesAssignment_7_2");
			builder.put(grammarAccess.getRoomAccess().getNameAssignment_0(), "rule__Room__NameAssignment_0");
			builder.put(grammarAccess.getRoomAccess().getLengthAssignment_2(), "rule__Room__LengthAssignment_2");
			builder.put(grammarAccess.getRoomAccess().getWidthAssignment_4(), "rule__Room__WidthAssignment_4");
			builder.put(grammarAccess.getRoomAccess().getDevicesAssignment_7_0(), "rule__Room__DevicesAssignment_7_0");
			builder.put(grammarAccess.getRoomAccess().getDevicesAssignment_7_1_1(), "rule__Room__DevicesAssignment_7_1_1");
			builder.put(grammarAccess.getAutomationRuleAccess().getNameAssignment_0(), "rule__AutomationRule__NameAssignment_0");
			builder.put(grammarAccess.getAutomationRuleAccess().getActiveAssignment_1_1(), "rule__AutomationRule__ActiveAssignment_1_1");
			builder.put(grammarAccess.getAutomationRuleAccess().getPreconditionAssignment_4(), "rule__AutomationRule__PreconditionAssignment_4");
			builder.put(grammarAccess.getAutomationRuleAccess().getActionsAssignment_6(), "rule__AutomationRule__ActionsAssignment_6");
			builder.put(grammarAccess.getAutomationRuleAccess().getActionsAssignment_7_1(), "rule__AutomationRule__ActionsAssignment_7_1");
			builder.put(grammarAccess.getSensorEntryAccess().getSensorAssignment_0(), "rule__SensorEntry__SensorAssignment_0");
			builder.put(grammarAccess.getSensorEntryAccess().getReadingAssignment_3(), "rule__SensorEntry__ReadingAssignment_3");
			builder.put(grammarAccess.getSensorEntryAccess().getTimeStampAssignment_5(), "rule__SensorEntry__TimeStampAssignment_5");
			builder.put(grammarAccess.getDeviceAccess().getNameAssignment_0(), "rule__Device__NameAssignment_0");
			builder.put(grammarAccess.getDeviceAccess().getTypeAssignment_3(), "rule__Device__TypeAssignment_3");
			builder.put(grammarAccess.getDeviceAccess().getLengthPosAssignment_6(), "rule__Device__LengthPosAssignment_6");
			builder.put(grammarAccess.getDeviceAccess().getWidthPosAssignment_8(), "rule__Device__WidthPosAssignment_8");
			builder.put(grammarAccess.getActionAccess().getActuatorAssignment_0(), "rule__Action__ActuatorAssignment_0");
			builder.put(grammarAccess.getActionAccess().getCommandAssignment_2(), "rule__Action__CommandAssignment_2");
			builder.put(grammarAccess.getAtomicRelationalTermAccess().getNegatedAssignment_0(), "rule__AtomicRelationalTerm__NegatedAssignment_0");
			builder.put(grammarAccess.getAtomicRelationalTermAccess().getSensorAssignment_1(), "rule__AtomicRelationalTerm__SensorAssignment_1");
			builder.put(grammarAccess.getAtomicRelationalTermAccess().getOperatorAssignment_2(), "rule__AtomicRelationalTerm__OperatorAssignment_2");
			builder.put(grammarAccess.getAtomicRelationalTermAccess().getComparedAgainstValueAssignment_3(), "rule__AtomicRelationalTerm__ComparedAgainstValueAssignment_3");
			builder.put(grammarAccess.getCompoundRelationalTermAccess().getNegatedAssignment_0(), "rule__CompoundRelationalTerm__NegatedAssignment_0");
			builder.put(grammarAccess.getCompoundRelationalTermAccess().getLHSAssignment_2(), "rule__CompoundRelationalTerm__LHSAssignment_2");
			builder.put(grammarAccess.getCompoundRelationalTermAccess().getOperatorAssignment_3(), "rule__CompoundRelationalTerm__OperatorAssignment_3");
			builder.put(grammarAccess.getCompoundRelationalTermAccess().getRHSAssignment_4(), "rule__CompoundRelationalTerm__RHSAssignment_4");
			builder.put(grammarAccess.getCommandAccess().getNameAssignment_1(), "rule__Command__NameAssignment_1");
			builder.put(grammarAccess.getSensorAccess().getNameAssignment_1(), "rule__Sensor__NameAssignment_1");
			builder.put(grammarAccess.getActuatorAccess().getNameAssignment_1(), "rule__Actuator__NameAssignment_1");
			builder.put(grammarAccess.getActuatorAccess().getCommandsAssignment_3_0(), "rule__Actuator__CommandsAssignment_3_0");
			builder.put(grammarAccess.getActuatorAccess().getCommandsAssignment_3_1_1(), "rule__Actuator__CommandsAssignment_3_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private HalGrammarAccess grammarAccess;

	@Override
	protected InternalHalParser createParser() {
		InternalHalParser result = new InternalHalParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HalGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
